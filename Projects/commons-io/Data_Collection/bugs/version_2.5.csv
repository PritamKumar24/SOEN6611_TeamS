Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Outward issue link (Reference),Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Thread bug in FileAlterationMonitor#stop(int),IO-535,13068280,Bug,Resolved,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,Fixed,pascalschumacher,anthonyraymond,anthonyraymond,5/1/2017 23:48,4/29/2018 9:22,6/19/2019 20:56,4/29/2018 9:22,2.5,,,,,,,,2.7,Utilities,,,0,easyfix,patch,performance,"The thread in FileAlterationMonitor wasn't stopped by the `stop(int)` method, which forbid application to shutdown until all `Thread` are exited (if FileAlterationMonitor is part of a DI managed component).

This behavior conflict with the method javadoc `@param stopInterval the amount of time in milliseconds to wait for the thread to finish.`

h5. Simple example to understand

Bad behavior
{code:java}
    Thread t = new Thread(() -> {
        try {
            Thread.sleep(500000);
        } catch (final InterruptedException e) {
        }
    });
    t.start();
    t.join(50);
   // Ok, we reach this point until 500000ms are elapsed, but the thread is still alive.
   //   because Thread#join(int) does not kill the thread. And the thread remains alive.
{code}

Good behavior
{code:java}
    Thread t = new Thread(() -> {
        try {
            Thread.sleep(500000);
        } catch (final InterruptedException e) {
        }
    });
    t.start();
    t.join(50);
    t.interupt();
   // Thread is exited
{code}

In this case, we waited the given time BEFORE exiting the `Thread`, as described in the javadoc, and the `Thread` is now finished and killed.",Components managed by a DI Framework,300,300,,0%,300,300,,,,,,,0,,,,,,,,,,,,,,,,,,,14:02.5,,,FALSE,,,,https://github.com/apache/commons-io/pull/36,Patch,,,,,,,,,9.22337E+18,,,Sun Apr 29 09:21:01 UTC 2018,,,,,,0|i3ecav:,9.22337E+18,,,,,,,,,01/May/17 23:52;anthonyraymond;GitHub pull request : https://github.com/apache/commons-io/pull/36,"10/Mar/18 19:14;githubbot;GitHub user SvetlinZarev opened a pull request:

    https://github.com/apache/commons-io/pull/58

    Fix IO-535

    Fix IO-535
    
    Adds test case to verify the incorrect behavior and the fix. 
    Does not incorrectly remove the Thread.currentThread().interrupt(); like the original PR (#36 ).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/SvetlinZarev/commons-io io-535

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-io/pull/58.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #58
    
----
commit 56a6496aebf960f0b19004d08d72b4c1a2d2b073
Author: Svetlin Zarev <svetlin.zarev@...>
Date:   2018-03-10T18:37:30Z

    Ignore IntelliJ IDE files

commit 967ec8505d0393d74ae2b80651b690b06ffe1ffb
Author: Svetlin Zarev <svetlin.zarev@...>
Date:   2018-03-10T19:02:06Z

    Add test case for IO-535

commit 22ead16c4e2d96ad5c0cf637e27f78479b2f0a04
Author: Svetlin Zarev <svetlin.zarev@...>
Date:   2018-03-10T19:03:39Z

    Fix IO-535
    
    Interrupt the thread created by FileAlterationMonitor on stop()

----
","29/Apr/18 09:21;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-io/pull/58
",,,,,,,,,,
FilenameUtils.concat fails if second argument (fullFilenameToAdd) starts with '~' (tilde),IO-552,13107180,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,Unresolved,,jtuemmer,jtuemmer,10/5/2017 9:20,10/12/2017 7:51,6/19/2019 20:55,,2.2,2.5,,,,,,,,Utilities,,,0,,,,"{{FilenameUtils.concat(""c:/temp"", ""~abc.txt"") returns ""~abc.txt/"" instead of ""c:/temp/~abc.txt"".}}

As a result, the file would be created in the user's home directory instead of c:/temp.

(Note: I Had to replace all instances of double backslashes that would normally appear in the java code with forward slashes as the editor cannot handle backslashes properly.)

commons io 2.2. and 2.5 behave the same. 2.3 and 2.4 not tested.","Windows 7 64bit, JavaVM 1.8 32bit",,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,22:23.0,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Thu Oct 12 07:51:34 UTC 2017,,,,,,0|i3kwof:,9.22337E+18,,,,,,,,,"12/Oct/17 07:22;kinow;FWIW, checked out the latest code, quickly tried the provided sample code, and successfully reproduced the issue.","12/Oct/17 07:51;kinow;Interesting. I didn't know, but looks like in Linux ~kinow is equivalent to /home/kinow, or to ~ if kinow is the currently logged-in user. My user is kinow, and trying `mkdir ~kinow` fails with directory already exists. But a random `mkdir ~jj` works. But so does `touch ~123`. Which means you can have a file or directory that starts with ~.

The [getPrefixLength() method|https://github.com/apache/commons-io/blob/43720d02405e0b96939b331c1be7812fe5fec877/src/main/java/org/apache/commons/io/FilenameUtils.java#L651] seems to assume that a file like ~kinow is going to be a directory. Thus moving the prefix to the last character + 1. 

When that happens, the [doNormalize()|https://github.com/apache/commons-io/blob/43720d02405e0b96939b331c1be7812fe5fec877/src/main/java/org/apache/commons/io/FilenameUtils.java#L348] simply appends the / to the end of the file name.

Altering the getPrefixLength() method to return 0 instead of the length+1 for the case in question, results in ""c:/temp/~abc.txt"", which I believe is the intended output.

However, this change also breaks 7 tests.

{noformat}
Results :

Failed tests: 
  FilenameUtilsTestCase.testConcat:474 expected:<[~user/]> but was:<[a/b/~user]>
  FilenameUtilsTestCase.testGetFullPath:744 expected:<[~user/]> but was:<[]>
  FilenameUtilsTestCase.testGetFullPathNoEndSeparator:779 expected:<[~user]> but was:<[]>
  FilenameUtilsTestCase.testGetPrefix:603 expected:<[~user/]> but was:<[]>
  FilenameUtilsTestCase.testGetPrefixLength:535 expected:<6> but was:<0>
  FilenameUtilsTestCase.testNormalize:192 expected:<~user[/]> but was:<~user[]>
  FilenameUtilsTestCase.testNormalizeNoEndSeparator:368 expected:<~user[/]> but was:<~user[]>

Tests run: 1318, Failures: 7, Errors: 0, Skipped: 4
{noformat}

Not sure how to fix it now. Might need to think about it some more. But would be easier if someone else chimed in to add a second opinion or alternatives. At work I am using FilenameUtils for parsing some file names in RESTful URL's. So might get some extra time to work on it if it impact us.

",,,,,,,,,,,
Symbolic links get followed in deleteQuietly,IO-522,13020514,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,Unresolved,stain,dtemme,dtemme,11/14/2016 14:36,9/29/2017 9:00,6/19/2019 20:55,,2.5,,,,,,,,,Utilities,,,0,,,,"IO-168 describes the problem. 

`deleteQuietly` will behave correctly for nested symlinks but the initial call erroneously calls `cleanDirectory`. Calling `deleteDirectory` and returning would probably be the better behaviour (analogous to `forceDelete`)",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,36:14.0,,,,,,0|i36aj3:,9.22337E+18,,,,,,,,,,,,,,,,,,,,,
Tailer pegs CPU if file disappears and doesn't come back,IO-530,13057073,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,Duplicate,,vanteo,vanteo,3/17/2017 17:07,4/23/2017 9:38,6/19/2019 20:55,4/23/2017 9:38,2.5,,,,,,,,,,,,0,,,,"I ran into a situation where a bug in my log rotation leads to the tailed file being renamed, but the original file name does not re-appear (new log entries still go to the renamed log file). This uncovered a bug in the Tailer class. In this case, tailer enters a tight loop trying to re-open the file:
{code}
while (getRun()) {
                final boolean newer = FileUtils.isFileNewer(file, last); // IO-279, must be done first
                // Check the file length to see if it was rotated
                final long length = file.length();
                if (length < position) {
                    // File was rotated
                    listener.fileRotated();
                    // Reopen the reader after rotation ensuring that the old file is closed iff we re-open it
                    // successfully
                    try (RandomAccessFile save = reader) {
                        reader = new RandomAccessFile(file, RAF_MODE);
                        // At this point, we're sure that the old file is rotated
                        // Finish scanning the old file and then we'll start with the new one
                        try {
                            readLines(save);
                        }  catch (IOException ioe) {
                            listener.handle(ioe);
                        }
                        position = 0;
                    } catch (final FileNotFoundException e) {
                        // in this case we continue to use the previous reader and position values
                        listener.fileNotFound();
                    }
                    continue;
{code}
Since a non-existent file returns a length of zero, we keep entering this top loop, trying to open the missing file, getting a FileNotFoundException and starting over.

There should be some delay here.
",,,,,,,,,,IO-528,,21/Mar/17 19:55;vanteo;io-530.patch;https://issues.apache.org/jira/secure/attachment/12859782/io-530.patch,,1,,,,,,,,,,,,,,,,,,,38:57.9,,,FALSE,,,,,Important,Patch,,,,,,,,9.22337E+18,,,Sun Apr 23 09:38:57 UTC 2017,,,,,,0|i3cfrz:,9.22337E+18,,,,,,,,,21/Mar/17 19:55;vanteo;Simple patch to add delay to the tight loop.,23/Apr/17 09:38;pascalschumacher;duplicates fixed issue [IO-528],,,,,,,,,,,
Exceptions are suppressed incorrectly when copying files.,IO-502,12962251,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,Fixed,ggregory,schulte77,schulte77,4/25/2016 14:20,5/3/2016 18:01,6/19/2019 20:55,4/27/2016 17:32,2.4,2.5,,,,,,,2.6,Utilities,,,0,,,,"When copying files or directories, exceptions thrown on closing streams are suppressed incorrectly and need to be propagated to the caller.",,,,,,,,,,,,27/Apr/16 16:02;schulte77;IO-502-OpenBSD.patch;https://issues.apache.org/jira/secure/attachment/12801054/IO-502-OpenBSD.patch,25/Apr/16 14:21;schulte77;IO-502.patch;https://issues.apache.org/jira/secure/attachment/12800526/IO-502.patch,2,,,,,,,,,,,,,,,,,,,55:20.2,,,FALSE,,,,,Patch,,,,,,,,,9.22337E+18,,,Wed Apr 27 17:32:47 UTC 2016,,,,,,0|i2wowv:,9.22337E+18,,,,,,,,,"25/Apr/16 21:55;ggregory;In this part of the patch:

{code:java}
Index: src/main/java/org/apache/commons/io/FileUtils.java
===================================================================
--- src/main/java/org/apache/commons/io/FileUtils.java	(Revision 1740841)
+++ src/main/java/org/apache/commons/io/FileUtils.java	(Arbeitskopie)
@@ -1154,6 +1154,18 @@
                 }
                 pos += bytesCopied;
             }
+
+            output.close();
+            output = null;
+
+            fos.close();
+            fos = null;
+
+            input.close();
+            input = null;
+
+            fis.close();
+            fis = null;
         } finally {
             IOUtils.closeQuietly(output, fos, input, fis);
         }
{code}

... some exceptions are still dropped on the floor. For example, output.close() works but fos.close() fails, then you do not ""see"" other failures. So what we really trying to do here, hide all except the 1st failure? But then, what is the proper order all the of close() calls. Should other errors then at least be printed on the console? Yikes. Sounds like a mess!

A change like this could also trip up existing apps in the case where exceptions are now thrown. But it seems quite legitimate to me... I would not care that the input fails to close but I sure do care about the output. 

Perhaps, always throwing an exception on closing the output and ignoring exceptions on closing the input would be best?

Thoughts?","25/Apr/16 23:11;schulte77;Good questions. Closing the input silently shouldn't be an issue. Issue is the implementation of the output may make use of some kind of buffering internally and a 'close' may trigger some kind of flushing which may produce an exception which shouldn't be suppressed. So when the 'close' of the output throws an exception I would expect the operation to have failed and would want that exception to be propagated to the caller.
","25/Apr/16 23:33;schulte77;The 'close' method of 'FileOutputStream' translates to a call to OpenJDK's native [fileClose|http://hg.openjdk.java.net/jdk7u/jdk7u/jdk/file/34c594b52b73/src/solaris/native/java/io/io_util_md.c#l88] method. That will call [JVM_Close|http://hg.openjdk.java.net/jdk7u/jdk7u-dev/hotspot/file/2cd3690f644c/src/share/vm/prims/jvm.cpp#l2642] leading to the operating system's C libraries 'close' function getting called. Definitely want any error that function returns to be propagated as an exception to the caller. It's completely operating system dependent. On my system the manpage of close states:

{noformat}
ERRORS
     close() will fail if:

     [EBADF]            d is not an active descriptor.
     [EINTR]            An interrupt was received.
     [EIO]              An I/O error occurred while writing to the file system.
{noformat}

Not suppressing any of these errors silently should do. I think closing a channel obtained from a stream will also close the stream internally. I do not know if that is specified behaviour or just an implementation detail of e.g. OpenJDK.
","25/Apr/16 23:46;sebb;Seems to me that the suggested patch is fine.

It closes the output objects first, so those take precedence over input.
It also closes the channel before the stream.

Is there really any point in trying to capture further close errors once the first error has occurred?
Would that provide any useful information?","26/Apr/16 23:56;ggregory;[~schulte77],

The patch causes NPE. Fixed is subsequent commit.

Please verify and close.

Thank you!

Gary","27/Apr/16 16:02;schulte77;Getting

{code}
testGetFreeSpace_String(org.apache.commons.io.FileSystemUtilsTestCase)  Time elapsed: 0.277 sec  <<< ERROR!
java.lang.IllegalStateException: Unsupported operating system
        at org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:271)
        at org.apache.commons.io.FileSystemUtils.freeSpace(FileSystemUtils.java:143)
        at org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String(FileSystemUtilsTestCase.java:71)
{code}

os.name is ""OpenBSD"". Patch adding support for it.

{code}
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
{code}",27/Apr/16 17:32;ggregory;Reopening to apply 2nd patch.,"27/Apr/16 17:32;ggregory;{noformat}
commit -m ""[IO-502] Exceptions are suppressed incorrectly when copying files. 2nd patch."" -N E:/vcs/svn/apache/commons/trunks-proper/io/src/main/java/org/apache/commons/io/FileSystemUtils.java
    Sending        E:/vcs/svn/apache/commons/trunks-proper/io/src/main/java/org/apache/commons/io/FileSystemUtils.java
    Transmitting file data ...
    Committed revision 1741296.
{noformat}

Please verify and fix.

Thank you!",,,,,
"listFiles(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter) does not recurse into subdirectories",IO-602,13216082,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Fixed,,steve@sjlt.co.uk,steve@sjlt.co.uk,2/15/2019 21:49,2/15/2019 22:50,6/19/2019 20:55,2/15/2019 22:50,2,2.0.1,2.1,2.2,2.3,2.4,2.5,2.6,,Utilities,,,0,,,,"Calling FileUtils.listFiles (someDir, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE) will only return top level files.

This contradicts the documentation that says the list should walk the file tree.",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Fri Feb 15 22:50:15 UTC 2019,,,,,,0|yi11hc:,9.22337E+18,,,,,,,,,15/Feb/19 22:50;steve@sjlt.co.uk;Brain fade - bad test case.,,,,,,,,,,,,
Should FileUtils.copyFile be flushed and synced before comparing file sizes?,IO-544,13084921,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Unresolved,,seanpltr,seanpltr,7/5/2017 18:22,12/11/2017 11:31,6/19/2019 20:55,,2.5,,,,,,,,,Utilities,,,0,,,,"I've been struggling to troubleshoot intermittent {{IOExceptions}} thrown from {{FileUtils.doCopyFile}} when copying 2-4KB files from a local temporary file to a network drive. Despite the error, the file appears on the network drive when I check. Should the output channel/buffer be forced/flushed before closing, and synchronized before comparing the file lengths? It's a rather intermittent issue on a relatively high throughput PC so I'd expect there to be more IO latency than normal.

I found myself referencing:
* [The source code for FileUtils v2.5|https://commons.apache.org/proper/commons-io/javadocs/api-2.5/src-html/org/apache/commons/io/FileUtils.html]
* [FileChannel#force(boolean)|https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#force-boolean-]
* [IO-443 - FileUtils.copyFile methods throw an unnecessary ""Failed to copy full contents from"" exception|https://issues.apache.org/jira/browse/IO-443]

Thanks,
Sean","Win Server 2008, x86",,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,48:12.3,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Fri Jul 07 21:22:10 UTC 2017,,,,,,0|i3h57j:,9.22337E+18,,,,,,,,,"05/Jul/17 20:48;b.eckenfels;Do you see the errors between different clients (i.e. Machine1 writes and sends message to Machine2 which cannot read) or on the same client. Because the later seems to be a Cache bug the former might be depending on the filesystem. Flush should not help here, if directly followed by a close(). An sync() might be a optional thing (in that case flush first). However most network filesystems have a close-to-commit semantic. What FS Server/type is this?","05/Jul/17 22:16;seanpltr;Thanks for the prompt reply Bernd.

The errors are between different clients, and only intermittently.
We have Machine1 copying to Machine2, which raises an IOException where the destination file length is always 0.
Machine1 is running Windows Server 2008, and is writing to a network drive on a PC running Windows Server 2012 R2. The destination is an NTFS drive, and I'm told that the shadow copies feature is enabled for backup.",05/Jul/17 22:36;b.eckenfels;You mean the server runs a directory scanning application which is not triggered after the commit but it starts to read as soon as it sees the file? In that case the problem is expected - you typically use a tempfilename/rename to have a atomic handoff. Sync would not really help here.,"05/Jul/17 23:50;seanpltr;I don't fully understand what you mean about a directory scanning application that is not triggered after the commit.

We're trying to have that copy a tempfile from Machine1 to a storage on a shared drive on Machine2. That's it. There are no other applications consuming or scanning the file *but* there is an antivirus suite running on Machine2. It's a straight forward file transfer as I see it. From what I can gather, the file transfer is OK but checking the destination file size returns 0. The disconnect between the result of destFile.length() and the successful copy is what makes me think it's not waiting for the OS to finish writing (somehow).",05/Jul/17 23:53;b.eckenfels;I guess what I am asking is Who is doing the check when and how. ,"06/Jul/17 00:01;seanpltr;Ah, sorry. The problem is with [line 1162 in FileUtils|https://commons.apache.org/proper/commons-io/javadocs/api-2.5/src-html/org/apache/commons/io/FileUtils.html#line.1130].","06/Jul/17 00:06;seanpltr;We have a scheduled task that runs every 4 hours. It logs locally in a tempfile.
When the work is done we copy the tempfile to the network drive using {{FileUtils.copyFile(local, remote, true);}}.

Let me know if there's anything else I can provide to help.","06/Jul/17 00:09;b.eckenfels;Ah ok, now I get it. I think I have seen this before and I do believe it is a SMB client bug. There are some directory caches and in a single client situation an unknown need for Cache invalidation. Maybe we can work around if by looping a limited time (but more often than currently). Related parameters: https://serverfault.com/questions/482174/slow-shared-folder-refresh-on-windows-7","06/Jul/17 00:35;b.eckenfels;Can you use Files.copy(Path,Path,...) from the standard JCL  instead? It uses the native copy function and has therefore not the problem with the not updated file metadata.","06/Jul/17 01:23;seanpltr;Wow, thanks Bernd! I'll pass the ServerFault article on to our server admin so we're aware of it.

Do you think it's worth follow-up about the SMB bug with Java? There's a closed [Java Bug about an incorrect File.length|http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4290946] from 2003 that suggested getting the FileDescriptor and calling sync() could fix a similar issue, but result in serious performance degradation. 

As for Files.copy(), we'll give it a go and hopefully not have to worry about unexpected error notifications.","06/Jul/17 01:27;seanpltr;I'm good to mark this resolved.

We've got a paper trail if anyone else happens upon this edge case and the two workaround - polling to update the stale cache or the [java.nio.file.*Files.copy(Path, Path, ...)*|https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html].
",06/Jul/17 02:29;b.eckenfels;Let us know if the Files version helped. I do wonder if the commons code could be improved. For example by removing the comparison and making the loop a bit different.,"07/Jul/17 21:22;seanpltr;Well, your hunch was right Bernd and I'm confused. Instead of a 0 length file, Files.copy is reporting that the destination file is in use:

{{java.nio.file.FileSystemException: C:\...\file -> \\Machine2\...\file: The process cannot access the file because it is being used by another process.}}"
Unexpected behavior of FileNameUtils.normalize may lead to limited path traversal vulnerabilies,IO-556,13119433,Bug,Resolved,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Duplicate,,Lukas Euler,Lukas Euler,11/18/2017 18:27,11/30/2017 20:34,6/19/2019 20:55,11/30/2017 20:34,2.2,2.3,2.4,2.5,2.6,,,,,Utilities,,,0,security,security-issue,,"I sent this report in an Email to security@apache.org on 2017-10-16. I did not receive any kind of response yet (2017-11-18 as of writing). I am now posting it publicly, to open the issue up for discussion, and hopefully initiate a fix.

This report is not about a vulnerability in {{commons-io}} per se, but an unexpected behavior that has a high chance of introducing a path traversal vulnerability when using {{FileNameUtils.normalize}} to sanitize user input. The traversal is limited to a single out-of-bounds-stepping ""/../"" segment.


h5. Reproduction

{Code}
FileNameUtils.normalize(""//../foo"");        // returns ""//../foo"" or ""\\\\..\\foo"", based on java.io.File.separatorChar
FileNameUtils.normalize(""\\\\..\\foo"");        // returns ""//../foo"" or ""\\\\..\\foo"", based on java.io.File.separatorChar
{Code}

h5. Possible impact (example)

Consider a web-application that uses {{FileNameUtils.normalize}} to sanitize a user-supplied file name string, and then appends the sanitized value to a configured upload directory to store the uploaded content in:

{Code}
String fileName = ""//../foo"";            // actually user-supplied (e.g. from multipart-POST request)
fileName = FileNameUtils.normalize(fileName);    // still holds the same value (""//../foo"")   
           
if (fileName != null) {
    File newFile = new File(""/base/uploads"", fileName);    // java.io.File treats double forward slashes as singles
                                // newFile now points to ""/base/uploads//../foo""
    newFile = newFile.getCanonicalFile();            // newFile now points to ""/base/foo"", which should be inaccessible

    // Write contents to newFile...
} else {
    // Assume malicious activity, handle error
}
{Code}


h5. Relevant code locations

* {{org.apache.commons.io.FilenameUtils#getPrefixLength}} : everything between a leading ""//"" and the next ""/"" is treated as a UNC server name, and ignored in all further validation logic of {{org.apache.commons.io.FilenameUtils#doNormalize}} .


h5. Discussion

One might argue that the given example is a misuse of the {{FileNameUtils.normalize}} method, and that everyone using it should expect absolute paths, full UNC paths, etc. to be returned by the method.
Furthermore, the vulnerability can only occur due to the lax behavior of {{java.io.File}} .

On the other hand, I believe that the JavaDoc of {{FileNameUtils.normalize}} suggests to most readers, that this method is exactly what is needed to sanitize file names:
{noformat}
//-----------------------------------------------------------------------
    /**
     * Normalizes a path, removing double and single dot path steps,
     * and removing any final directory separator.
     * <p>
     * This method normalizes a path to a standard format.
     * The input may contain separators in either Unix or Windows format.
     * The output will contain separators in the format of the system.
     * <p>
     * A trailing slash will be removed.
     * A double slash will be merged to a single slash (but UNC names are handled).
     * A single dot path segment will be removed.
     * A double dot will cause that path segment and the one before to be removed.
     * If the double dot has no parent path segment to work with, {@code null}
     * is returned.
     * <p>
     * The output will be the same on both Unix and Windows except
     * for the separator character.
     * <pre>
     * /foo//               --&gt;   /foo
     * /foo/./              --&gt;   /foo
     * /foo/../bar          --&gt;   /bar
     * /foo/../bar/         --&gt;   /bar
     * /foo/../bar/../baz   --&gt;   /baz
     * //foo//./bar         --&gt;   /foo/bar
     * /../                 --&gt;   null
     * ../foo               --&gt;   null
     * foo/bar/..           --&gt;   foo
     * foo/../../bar        --&gt;   null
     * foo/../bar           --&gt;   bar
     * //server/foo/../bar  --&gt;   //server/bar
     * //server/../bar      --&gt;   null
     * C:\foo\..\bar        --&gt;   C:\bar
     * C:\..\bar            --&gt;   null
     * ~/foo/../bar/        --&gt;   ~/bar
     * ~/../bar             --&gt;   null
     * </pre>
     * (Note the file separator returned will be correct for Windows/Unix)
     *
     * @param filename  the filename to normalize, null returns null
     * @return the normalized filename, or null if invalid. Null bytes inside string will be removed
     */
{noformat}

I have done a quick survey of the usages of the method in public GitHub repositories. I have found numerous projects that suffer from the limited path traversal vulnerability that is described here because of this very issue. This includes Webservers, Web-Frameworks, Archive-Extraction-Software, and others.

Preventing path traversal attacks is not trivial, and many people turn to libraries like {{commons-io}} to avoid making mistakes when implementing parsing logic on their own. They trust that {{FileNameUtils}} will provide them with the most complete, and suitable sanitation logic for file names.
In addition, "".."" is not a valid UNC host name according to https://msdn.microsoft.com/de-de/library/gg465305.aspx , so prohibiting it shouldn't result in any major problems.",all,,,,,,,,,IO-559,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,27:37.0,,,,,,0|i3myon:,9.22337E+18,,,,,,,,,,,,,,,,,,,,,
2.5 ExceptionInInitializerError,IO-536,13070501,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Fixed,,mitchellsundt,mitchellsundt,5/9/2017 17:17,10/20/2017 6:49,6/19/2019 20:55,5/17/2017 21:32,2.5,,,,,,,,2.6,Utilities,,,0,,,,"In its static block, org.apache.commons.io.Java7Support executes:

ClassLoader cl = Thread.currentThread().getContextClassLoader();
            
This can be null.

In that case, I believe the class should fall back to using:

Java7Support.class.getClassLoader();

But someone with a better understanding of the security implications should weigh in on that change.
","This occurs on Android devices. But I think it is a general issue.
",,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,32:15.6,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Wed May 17 21:32:15 UTC 2017,,,,,,0|i3epzb:,9.22337E+18,,,,,,,,,"17/May/17 21:32;pascalschumacher;Thanks for reporting.

Java7Support was removed for [IO-514] with commit https://github.com/apache/commons-io/commit/9d432121e1c60557da3e159252a88885944e5f00",,,,,,,,,,,,
Tailer.run race condition runaway logging,IO-528,13039382,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Fixed,pascalschumacher,davidmoten2,davidmoten2,2/1/2017 4:18,10/20/2017 6:49,6/19/2019 20:55,4/23/2017 9:35,2.5,,,,,,,,2.6,Utilities,,,0,,,,"`Tailer.run` has a race condition that can have serious effects. 

The `run()` method has two while loops. The first waits till the file exists and the second loop reads lines from the file doing some file rotation checking on the way.  If the file is deleted while the second loop is in progress then the loop goes crazy logging warnings that look like this:

`
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
INFO: file rotated
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
WARNING: file not found
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
INFO: file rotated
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
WARNING: file not found
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
INFO: file rotated
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
WARNING: file not found
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
INFO: file rotated
Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
WARNING: file not found
`

In our case this had serious effects. The file being tailed was deleted by another process and all available disk space was rapidly used up by the logging. This crashed a system.

The fix is to put a sleep after the call to `fileNotFound()`.

This problem was raised in IO-398 three years ago but no change was made to the code base.

PR submitted via github repo.",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,20:30.6,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Sun Apr 23 09:32:37 UTC 2017,,,,,,0|i39g93:,9.22337E+18,,,,,,,,,"01/Feb/17 04:20;githubbot;GitHub user davidmoten opened a pull request:

    https://github.com/apache/commons-io/pull/29

    [IO-528] fix Tailer.run race condition runaway logging

    `Tailer.run` has a race condition that can have serious effects. 
    
    The `run()` method has two while loops. The first waits till the file exists and the second loop reads lines from the file doing some file rotation checking on the way.  If the file is deleted while the second loop is in progress then the loop goes crazy logging warnings that look like this:
    
    `
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
    INFO: file rotated
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
    WARNING: file not found
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
    INFO: file rotated
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
    WARNING: file not found
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
    INFO: file rotated
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
    WARNING: file not found
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated
    INFO: file rotated
    Dec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound
    WARNING: file not found
    `
    
    In our case this had serious effects. The file being tailed was deleted by another process and all available disk space was rapidly used up by the logging. This crashed a system.
    
    The fix is to put a sleep after the call to `fileNotFound()`.
    
    I haven't made a unit test because reliably triggering this problem would involve a major refactor of the `run` method to make it testable.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidmoten/commons-io fix-tailer-race-condition

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-io/pull/29.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #29
    
----
commit b6c13341564475f4b804ec8e46f665211236b7f7
Author: Dave Moten <davidmoten@gmail.com>
Date:   2017-02-01T03:54:00Z

    fix Tailer.run race condition runaway logging

----
",01/Feb/17 04:20;davidmoten2;Github PR: https://github.com/apache/commons-io/pull/29,"23/Apr/17 09:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-io/pull/29
",,,,,,,,,,
ThresholdingOutputStream.thresholdReached() results in FileNotFoundException,IO-512,12997325,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Fixed,,hauser@acm.org,hauser@acm.org,8/15/2016 15:51,10/20/2017 6:49,6/19/2019 20:55,8/17/2016 0:51,2.5,,,,,,,,2.6,Streams/Writers,,,0,,,,"I upgraded from commons-io-2.0.1.jar to v2.5 (and fileupload to v1.32)

and now I get

java.io.FileNotFoundException: /usr/share/tomcat/temp/dfifp/upload_4d9f8898_1a83_4092_9070_ddf9c15de6d1_00000027.tmp (No such file or directory)
	at java.io.FileOutputStream.open(Native Method)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:213)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:162)
	at org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached(DeferredFileOutputStream.java:179)

In thresholdReached(), the prefix is null, so no temp file is created.
In the subsequent new FileOutputStream(outputFile), the exception is thrown.

Suggested fix:
before new FileOutputStream(outputFile) , add

FileUtils.forceMkdirParent(outputFile);

Similar issues reported by others:
- IO-497
- https://java.net/jira/browse/GLASSFISH-20581
- https://jira.sakaiproject.org/si/jira.issueviews:issue-html/SAM-1537/SAM-1537.html
",java8  debian,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,51:26.8,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Wed Aug 17 14:47:06 UTC 2016,,,,,,0|i32bov:,9.22337E+18,,,,,,,,,"17/Aug/16 00:51;ggregory;In Svn trunk.

Please verify and close.","17/Aug/16 05:58;hauser@acm.org;if that directory path doesn't change during application run-time, it might be enough to only check for its existence statically upon initial instantiation?","17/Aug/16 14:47;ggregory;It seems to me that you cannot control what happens on disk outside an app 100% of the time, so this solution should work all the time.",,,,,,,,,,
The problem of log acquisition,IO-526,13032142,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Unresolved,,zhanghua09,zhanghua09,1/5/2017 2:16,10/13/2017 16:48,6/19/2019 20:55,,2.5,,,,,,,,,Streams/Writers,,,0,,,,"Problem Description:
        Recently a problem appeared in the use of commons io 2.5 when Tailer class is in the process of monitoring and reading log files: there is lost logs and repeatedly collected logs for the collection of log files continuously split by time .
Scene reproduction:
      We use log4j-1.2.17 in our project to generate the log file and split it up once every hour. If the current file name is system.log, the file name after splitting is system1.log.The Tailer class in commons io 2.5 monitors changes to the file every 500 milliseconds.
     1. The current system.log length is 10, position is also 10, after cutting the new system.log length is 20, then this.length is greater than position and position is set to 0, the old file collection then repeats (ie, system1. Log). New log is missing.
     2. The current system.log length is 10,position is 10, after cutting new system.log length is 10, then this.length is equal to position, no log information is read. New file logs is missing.
    I hope commons io team can solve this problem, thank you!",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,Important,,,,,,,,,9.22337E+18,,,16:22.0,,,,,,0|i38a9r:,9.22337E+18,,,,,,,,,,,,,,,,,,,,,
ValidatingObjectInputStream does not handle arrays of primitive types,IO-525,13031463,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Unresolved,,Starous,Starous,1/2/2017 9:37,1/2/2017 9:37,6/19/2019 20:55,,2.5,,,,,,,,,,,,0,,,,"ValidatingObjectInputStream does not handle arrays and primitive types correctly. 

The current behaviour expects a classname, but for example for byte arrays it fails on unknown class with name [B

I would expect some possibility of whitelisting of primitive types and/or arrays",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,37:14.0,,,,,,0|i3863j:,9.22337E+18,,,,,,,,,,,,,,,,,,,,,
Maven-Bundle-Plugin imports version 2.4 as 1.4,IO-350,12613100,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Unresolved,,adrian2k7,adrian2k7,10/23/2012 7:25,11/27/2016 9:43,6/19/2019 20:55,,2.4,2.5,,,,,,,,,,,1,,,,"In 2.4 you added 
{code}
 <commons.osgi.export>
        <!-- Explicit list of packages from IO 1.4 -->
        org.apache.commons.io;
        org.apache.commons.io.comparator;
        org.apache.commons.io.filefilter;
        org.apache.commons.io.input;
        org.apache.commons.io.output;version=1.4.9999;-noimport:=true,
        <!-- Same list plus * for new packages -->
        org.apache.commons.io;
        org.apache.commons.io.comparator;
        org.apache.commons.io.filefilter;
        org.apache.commons.io.input;
        org.apache.commons.io.output;
        org.apache.commons.io.*;version=${project.version};-noimport:=true
    </commons.osgi.export>
{code}

This creates an entry in the MANIFEST.MF like
{code}
Import-Package: org.apache.commons.io;version=""[1.4,2)""
{code}

Which leads to our bundles not working with 2.4, as we are exporting 2.4 and not 1.4 in our application.

I think the solution is, that if somebody want's to use it as 1.4 he should export the packages as 1.4 by themselves.

I added an example project.",,,,,,,,,,,,23/Oct/12 07:27;adrian2k7;commons-io-osgi-bug.zip;https://issues.apache.org/jira/secure/attachment/12550418/commons-io-osgi-bug.zip,,1,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,250502,,,25:47.0,,,,,,0|i0ayyn:,61937,,,,,,,,,,,,,,,,,,,,,
FileUtils.readFileToString: null not usable for default encoding,IO-509,12976372,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Not A Problem,,wolterhis,wolterhis,6/7/2016 9:22,11/8/2016 18:04,6/19/2019 20:55,6/7/2016 9:55,2.5,,,,,,,,,Utilities,,,0,,,,"Since 2.5 FileUtils.readFileToString(File) is deprecated. readFileToString(File, Charset) should be used instead.
The javadoc of readFileToString(File, Charset) says that, if the charset is null, the platform default charset will be used.
But I cannot use readFileToString(File, null) to get that behaviour, since there also is readFileToString(File, String), so that readFileToString(File, null) is ambiguous.",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,55:38.4,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Tue Jun 07 10:55:13 UTC 2016,,,,,,0|i2z2rb:,9.22337E+18,,,,,,,,,"07/Jun/16 09:55;sebb;Cast the null to a Charset:

readFileToString(File, (Charset) null)","07/Jun/16 10:36;wolterhis;Is there a reason for deprecating the shorter version readFileToString(File)?
It's not mentioned in the release notes.","07/Jun/16 10:40;sebb;It uses the default encoding.
This means that the behaviour is locale-dependent.","07/Jun/16 10:55;sebb;i.e. 
If you want it to be portable, your code should always specify the charset and not rely on the default being correct.",,,,,,,,,
ant test fails - resources missing from test classpath,IO-451,12726999,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Fixed,,standish,standish,7/13/2014 16:58,11/8/2016 17:58,6/19/2019 20:55,7/28/2014 9:34,2.5,,,,,,,,2.5,,,,0,test,,,"ant test does not copy test resources to target/ and does not include test resources in test class path.
maven test is ok.

Example failure:
----------------------------------------------
someguy@weeble:~/prog/java/commons-io/commons-io$ ant clean
Buildfile: /home/someguy/prog/java/commons-io/commons-io/build.xml
 .
 .
 .
BUILD SUCCESSFUL
Total time: 0 seconds

someguy@weeble:~/prog/java/commons-io/commons-io$ ant test
Buildfile: /home/someguy/prog/java/commons-io/commons-io/build.xml
 .
 .
 .
    [junit] Running org.apache.commons.io.FileUtilsListFilesTestCase
    [junit] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec
    [junit] Running org.apache.commons.io.FileUtilsTestCase
    [junit] Tests run: 20, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.087 sec

BUILD FAILED
/home/someguy/prog/java/commons-io/commons-io/build.xml:192: Test org.apache.commons.io.FileUtilsTestCase failed

Total time: 32 seconds

----------------------------------------------


candidate patch to resolve issue
------------------------------------------------
{code}
someguy@weeble:~/prog/java/commons-io/commons-io$ svn diff build.xml 
Index: build.xml
===================================================================
--- build.xml   (revision 1609743)
+++ build.xml   (working copy)
@@ -63,6 +63,9 @@
   <!-- The base directory for unit test sources -->
   <property name=""test.home""               value=""src/test/java""/>
 
+  <!-- The base directory for unit test resources -->
+  <property name=""test.resources.home""               value=""src/test/resources""/>
+
   <!-- Download lib dir -->
   <property name=""download.lib.dir""        value=""lib""/>
 
@@ -115,6 +118,7 @@
   <path id=""test.classpath"">
     <pathelement location=""${build.home}/classes""/>
     <pathelement location=""${build.home}/test-classes""/>
+    <pathelement location=""${build.home}/test-resources""/>
     <pathelement location=""${junit.jar}""/>
     <path refid=""downloaded.lib.classpath""/>
   </path>
@@ -177,6 +181,9 @@
              includeantruntime=""false"">
           <classpath refid=""test.classpath""/>
       </javac>
+      <copy todir=""${build.home}/test-resources"">
+        <fileset dir=""${test.resources.home}""/>
+      </copy>
     </target>
 
   <target name=""test""  depends=""compile.tests""
{code}
","Apache Ant(TM) version 1.9.3 compiled on April 8 2014
java version ""1.7.0_55""
OpenJDK Runtime Environment (IcedTea 2.4.7) (7u55-2.4.7-1ubuntu1)
OpenJDK Server VM (build 24.51-b03, mixed mode)
Linux weeble 3.13.0-30-generic #55-Ubuntu SMP Fri Jul 4 21:43:42 UTC 2014 i686 i686 i686 GNU/Linux
",,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,34:54.8,,,FALSE,,,,,,,,,,,,,,405106,,,Mon Jul 28 09:34:54 UTC 2014,,,,,,0|i1xpv3:,405142,,,,,,,,,"28/Jul/14 09:34;sebb;Thanks very much.
Patch applied (by the way, please provide patches as file attachments in future, as they are easier to apply. Thanks)

URL: http://svn.apache.org/r1613938
Log:
IO-451 ant test fails - resources missing from test classpath

Modified:
    commons/proper/io/trunk/build.xml
    commons/proper/io/trunk/src/changes/changes.xml
",,,,,,,,,,,,
FileUtils.sizeOfDirectory(File) throws IllegalArgumentException on symlink that does not exist,IO-449,12724028,Bug,Open,IO,Commons IO,res,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Unresolved,,schristou88,schristou88,6/27/2014 1:08,10/28/2015 9:48,6/19/2019 20:55,,2.5,,,,,,,,,Utilities,,,1,,,,FileUtils.isSymlink(File) will throw an IllegalArgumentException if the symbolic link does not exist. FileUtils.sizeOfDirectory(File) ignores any exceptions that are from the symbolic link. I added another catch to ignore IllegalArgumentException.,,,,,,,,,,,,27/Jun/14 01:13;schristou88;IO-449.diff;https://issues.apache.org/jira/secure/attachment/12652728/IO-449.diff,,1,,,,,,,,,,,,,,,,,,,18:14.9,,,FALSE,,,,,,,,,,,,,,402213,,,Wed Oct 28 09:48:40 UTC 2015,,,,,,0|i1x8a7:,402277,,,,,,,,,27/Jun/14 01:13;schristou88;I have created a patch for this issue.,30/Jun/14 22:18;kinow;Patch looks good and doesn't break any existing tests cases.,21/Aug/15 14:31;risenberg;When shall this fix appear in a release?,"28/Oct/15 09:13;almson;I'm not sure the explanation and comment is correct. This isn't about symlinks, and I don't think `isSymlink` throws IllegalArgumentException.

This fixes a race condition when the directory is being modified as its size is being calculated.

This also underlines a problem with FileUtils.sizeOf(File). It shouldn't throw `IllegalArgumentException`, it should throw a checked `IOException` when the file isn't found because the caller can't prevent the exception and he should be reminded to check for it.","28/Oct/15 09:48;risenberg;There is a problem with symlinks, though it is not correctly described - isSymlink() returns false for broken symlinks and then an IllegalArgumentException is thrown by sizeOf.",,,,,,,,
IOUtils.writeLines is not correct with a charset with BOM,IO-414,12683335,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,Unresolved,,florent.brosse,florent.brosse,12/8/2013 16:36,12/8/2013 16:43,6/19/2019 20:55,,2.4,2.5,,,,,,,,Streams/Writers,Utilities,,0,,,,"When a charset has a BOM (like UTF-16), the method IOUtils.writeLines put 2 BOM on each line.

",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,362587,,,Sun Dec 08 16:40:24 UTC 2013,,,,,,0|i1qi1b:,362881,,,,,,,,,"08/Dec/13 16:40;florent.brosse;I suggest that code to correct that bug:

    public static void writeLines(final Collection<?> lines, String lineEnding, final OutputStream output, final Charset encoding)
            throws IOException {
        if (lines == null) {
            return;
        }
        if (lineEnding == null) {
            lineEnding = LINE_SEPARATOR;
        }
        final Charset cs = Charsets.toCharset(encoding);
        StringBuilder stringBuilder = new StringBuilder();
        for (final Object line : lines) {
            if (line != null) {
            	stringBuilder.append(line.toString());
            }
            stringBuilder.append(lineEnding);
        }
        output.write(stringBuilder.toString().getBytes(cs));
    }

 public static void writeLines(final Collection<?> lines, String lineEnding,
            final Writer writer) throws IOException {
        if (lines == null) {
            return;
        }
        if (lineEnding == null) {
            lineEnding = LINE_SEPARATOR;
        }
        StringBuilder stringBuilder = new StringBuilder();
        for (final Object line : lines) {
            if (line != null) {
            	stringBuilder.append(line.toString());
            }
            stringBuilder.append(lineEnding);
        }
        writer.write(stringBuilder.toString());
    }
",,,,,,,,,,,,
copyDirectory (all overloads) does not maintain file permissions,IO-575,13146042,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,Unresolved,,adamkewley,adamkewley,3/18/2018 12:33,3/19/2018 11:22,6/19/2019 20:55,,2.5,,,,,,,,,,,,0,,,,"I found that permissions (specifically, execute) are not maintained when using copyDirectory. The following test demonstrates the behavior:**

 
{code:java}
Path sourceDir = Files.createTempDirectory(""source-dir"");
String filename = ""some-file"";
Path sourceFile = Files.createFile(sourceDir.resolve(filename));

assertThat(sourceFile.toFile().canExecute()).isFalse();

sourceFile.toFile().setExecutable(true);

assertThat(sourceFile.toFile().canExecute()).isTrue();

Path destDir = Files.createTempDirectory(""some-empty-destination"");

FileUtils.copyDirectory(sourceDir.toFile(), destDir.toFile());

Path destFile = destDir.resolve(filename);

assertThat(destFile.toFile().exists()).isTrue();
assertThat(destFile.toFile().canExecute()).isTrue(); // fails
{code}
Is it working as intended that the permissions are not copied over?

 

 

 ",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,50:59.6,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Mon Mar 19 11:22:02 UTC 2018,,,,,,0|i3rgjz:,9.22337E+18,,,,,,,,,"18/Mar/18 19:50;sebb;I don't think the code makes any guarantees that permissions will be maintained.
As such, the code is behaving as designed. Though it could be better documented.

This might be worth implementing as an optional feature.
I don't think it should be the default, as that would change long-standing behaviour which people may be relying on.","19/Mar/18 11:22;adamkewley;Ok, thanks for clarifying - I thought as much, but wanted to bring it to the dev's attention.

I need the feature in my software because it executes arbitrary files at runtime so, in my case, I implemented a `FileVisitor`, almost exactly as Oracle's example:

[https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html]

(again, just in case other devs need it)",,,,,,,,,,,
Throw a IllegalArgumentException  instead of NullPointerException in FileSystemUtils.freeSpaceWindows(),IO-547,13094341,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,Fixed,,nikshinde1996,nikshinde1996,8/13/2017 15:18,10/20/2017 6:49,6/19/2019 20:55,9/7/2017 19:33,2.5,,,,,,,,2.6,,,,0,beginner,,,"In FileSystemutils.freeSpaceWindows(String path,long timeout) , path cannot be null. In this function for following assignment
          path = FilenameUtils.normalize(path,bool), path is assigned null value when 
          (1) path argument is null.
          (2) path argument is illegal/invalid path as per windows system.

{code:java}
public class FileSystemutilTest {
	public static void main(String args[]){
		FileSystemUtils fsuobj = new FileSystemUtils();
                String path = "":\\Users\\nikhil\\Desktop\\tests"";  /* Invalid path, causes Nullpointer Exception*/
		try {
			long space = fsuobj.freeSpace(path);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
{code}

For above test case, as path is illegal for windows system, Nullpointer exception occurs. A check for validity of path as per windows file system, will resolve this bug.


",Windows OS,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,24:00.5,,,FALSE,,,,,Important,,,,,,,,,9.22337E+18,,,Thu Sep 07 19:33:28 UTC 2017,,,,,,0|i3iqhr:,9.22337E+18,,,,,,,,,13/Aug/17 19:24;ggregory;What would you have happen on illegal input? An IllegalArgumentException?,"29/Aug/17 06:19;nikshinde1996;Invalid path cause NullPointerException, refer entire exception stack below

Exception in thread ""main"" java.lang.NullPointerException
	at org.apache.commons.io.FileSystemUtils.freeSpaceWindows(FileSystemUtils.java:290)
	at org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:265)
	at org.apache.commons.io.FileSystemUtils.freeSpace(FileSystemUtils.java:143)
	at com.example.playground.FileSystemutilTest.main(FileSystemutilTest.java:13)
",29/Aug/17 06:27;ggregory;Do you have a proposal?,"07/Sep/17 18:39;mdernst;I agree with you that IllegalArgumentException is appropriate.  The documentation of freeSpaceWindows says that the `path` parameter should be a (Windows) path, and if it's not then the arguments were illegal.
IOException would also be OK according to the Javadoc.",07/Sep/17 19:33;ggregory;In git master. Please verify and close.,,,,,,,,
FilenameUtils.getFullPath incorrectly parses file names that begin with a tilde,IO-545,13086967,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,Unresolved,,tfjpg,tfjpg,7/13/2017 18:12,8/2/2017 17:16,6/19/2019 20:55,,2.4,2.5,,,,,,,,Utilities,,,0,,,,"For any file with a name that begins with a tilde, which is a valid file name in BSD and Windows, if you call FilenameUtils.getFullPath and pass the file name, it returns the file name followed by a path separator. It should return an empty string. It seems to be parsing it as a unix user directory because it starts with the tilde.","OpenJDK Runtime Environment (build 1.8.0_92-b14)
FreeBSD 10.0-RELEASE-p11
",,,,,,,,,,MNG-6267,,,0,,,,,,,,,,,,,,,,,,,57:45.6,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Mon Jul 17 13:41:50 UTC 2017,,,,,,0|i3hhrr:,9.22337E+18,,,,,,,,,15/Jul/17 21:57;michael-o;Why are you still on 10.0? It is out of support. Can you create an sample code for me? I can try on 10.3 and 11.0. I highly doubt the issue because there is no tilde expansion here.,"17/Jul/17 13:41;tfjpg;The OS is irrelevant because getFullPath just does parsing, it doesn't hit the file system. To be totally sure, I tested on Ubuntu 16.04.2 and got the same result. 

FilenameUtils.getFullPath(""~tildefilename.txt"") returns:
 ~tildefilename.txt/

It should return an empty string.

I went through the code for getFullPath and see where the issue is. It eventually calls getPrefixLength which has this block:
{code:java}
if (ch0 == '~') {
    int posUnix = filename.indexOf(UNIX_SEPARATOR, 1);
    int posWin = filename.indexOf(WINDOWS_SEPARATOR, 1);
    if (posUnix == -1 && posWin == -1) {
        return len + 1;  // return a length greater than the input
    }
    posUnix = posUnix == -1 ? posWin : posUnix;
    posWin = posWin == -1 ? posUnix : posWin;
    return Math.min(posUnix, posWin) + 1;
}
{code}

So if you pass getFullPath just a file name, with no path part, and that file name starts with a '~', the if (posUnix == -1 && posWin == -1) condition will be true. It is interpreting it as a ""named user"". It's actually in the javadoc for the method:
 * ~user/a/b/c.txt     --> ""~user/""    --> named user
 * ~user               --> ""~user/""    --> named user (slash added)

However, since you can have a file named something like ""~tildefilename.txt"", this is a problem. Either the method needs to be altered to account for this (although I am not sure it is possible to figure out if it is a file or a named user without hitting the file system), or at the very least the javadoc needs to be updated to note that the method will fail in these cases.",,,,,,,,,,,
"IOUtils.copy(IS, Writer) implementation and javadoc disagrees",IO-430,12701099,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,Invalid,,b.eckenfels,b.eckenfels,3/12/2014 21:43,4/23/2017 18:27,6/19/2019 20:55,4/23/2017 18:27,2.5,,,,,,,,,Utilities,,,0,javadoc,,,"The Javadoc of the (deprecated) IOUtils.copy(InputStream,Writer) states:

{code}
  * This method uses {@link InputStreamReader}.
{code}

but the actual code does not:

{code}
    @Deprecated
    public static void copy(final InputStream input, final Writer output)
            throws IOException {
        copy(input, output, Charset.defaultCharset());
    }
{code}

My suggestion would be to change the javadoc to state ""@link copy(InputStream, Writer, Charset)} with @{code Charset.defaultCharset()}""",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,FALSE,,,,,,,,,,,,,,379445,,,Wed Mar 12 21:47:22 UTC 2014,,,,,,0|i1tdpz:,379736,,,,,,,,,"12/Mar/14 21:47;b.eckenfels;Hmm.. actually the bug might be invalid, since the copy() method uses the InputStreamReader() like documented. (However it might be more correct to only link to that signature variant)?",,,,,,,,,,,,
Documentation Bug of Tailer - it opens thread within,IO-524,13029707,Bug,Resolved,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,Not A Problem,,sharik79,sharik79,12/21/2016 11:08,2/16/2017 17:58,6/19/2019 20:55,2/16/2017 17:58,2.4,2.5,,,,,,,,Utilities,,,0,,,,"Documentation of
org.apache.commons.io.input.Tailer
describes how to handle threading, while it seems that thread being openened within, and seamlessly to user.

need to update the doc.",,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,58:50.9,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Thu Feb 16 17:58:50 UTC 2017,,,,,,0|i37v9j:,9.22337E+18,,,,,,,,,"21/Dec/16 13:38;sharik79;just to make sure. the documentation I see is here:
http://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/input/Tailer.html
","16/Feb/17 17:58;sebb;Threads are only created within the create() methods.

Otherwise the user has to start the thread or use an Executor as per the Javadoc",,,,,,,,,,,
"Typo: In an IOUtils.java comment it says ""focussed"" instead of ""focused""",IO-492,12924673,Bug,Closed,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,Fixed,ggregory,bryant1410,bryant1410,12/29/2015 12:12,12/29/2015 17:42,6/19/2019 20:55,12/29/2015 15:40,2.4,2.5,2.6,3.x,,,,,2.5,Utilities,,,0,documentation,easyfix,,See here: https://github.com/apache/commons-io/blob/trunk/src/main/java/org/apache/commons/io/IOUtils.java#L101,,60,60,,0%,60,60,,,,,,,0,,,,,,,,,,,,,,,,,,,40:37.2,,,FALSE,,,,,,,,,,,,,,9.22337E+18,,,Tue Dec 29 15:40:37 UTC 2015,,,,,,0|i2qdd3:,9.22337E+18,,,,,,,,,29/Dec/15 15:40;ggregory;Fixed in trunk. Please verify and close.,,,,,,,,,,,,
